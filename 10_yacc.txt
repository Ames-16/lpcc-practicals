/* PROGRAM.Y */

%{
#include <stdio.h>
#include <stdlib.h>
#include <math.h>

int yylex(void);
void yyerror(char *s);
%}

%union {
    double dval;
}

%token <dval> NUMBER
%token EOL
%token PLUS MINUS TIMES DIVIDE POWER LPAREN RPAREN

%type <dval> expression

/* Operator precedence and associativity */
%left PLUS MINUS
%left TIMES DIVIDE
%right POWER
%left UMINUS

%%

calculation:
    | calculation expression EOL { printf("Result: %.6g\n", $2); }
    ;

expression: 
    NUMBER                      { $$ = $1; }
    | expression PLUS expression { $$ = $1 + $3; }
    | expression MINUS expression { $$ = $1 - $3; }
    | expression TIMES expression { $$ = $1 * $3; }
    | expression DIVIDE expression { 
        if ($3 == 0) {
            yyerror("Division by zero");
            $$ = 0;
        } else {
            $$ = $1 / $3; 
        }
    }
    | expression POWER expression { $$ = pow($1, $3); }
    | MINUS expression %prec UMINUS { $$ = -$2; }
    | LPAREN expression RPAREN { $$ = $2; }
    ;

%%

void yyerror(char *s) {
    fprintf(stderr, "Error: %s\n", s);
}

int yywrap() {
    return 1;
}

int main() {
    printf("Arithmetic Expression Evaluator\n");
    printf("Supports: +, -, *, /, ^ (exponent), parentheses\n");
    printf("Enter expressions, each ending with a newline.\n");
    printf("Press Ctrl+D (EOF) to exit.\n\n");
    
    yyparse();
    return 0;
}

/* ------------------------- */

/* PROGRAM.L */

%{
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include "y.tab.h"

%}

%%
[0-9]+(\.[0-9]+)?  { yylval.dval = atof(yytext); return NUMBER; }
[ \t]              ; /* Skip whitespace */
\n                 { return EOL; }
"+"                { return PLUS; }
"-"                { return MINUS; }
"*"                { return TIMES; }
"/"                { return DIVIDE; }
"^"                { return POWER; }
"("                { return LPAREN; }
")"                { return RPAREN; }
.                  { printf("Invalid character: %s\n", yytext); }
%%

/* 
yacc -d program.y
lex program.l
cc y.tab.c lex.yy.c -lm
./a.out
*/