/* PROGRAM.Y*/
%{
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <string.h>

int yylex(void);
void yyerror(char *s);
%}

%union {
    double dval;
    char *sval;
}

%token <dval> NUMBER
%token <sval> STRING
%token SQRT STRLEN SIN COS POW LOG
%token PLUS MINUS TIMES DIVIDE POWER
%token LPAREN RPAREN COMMA EOL

%type <dval> expression

/* Operator precedence and associativity */
%left PLUS MINUS
%left TIMES DIVIDE
%right POWER
%left UMINUS

%%
calculation:
    | calculation expression EOL { printf("Result: %.6g\n", $2); }
    | calculation error EOL { yyerrok; }
    ;

expression:
    NUMBER                      { $$ = $1; }
    | SQRT LPAREN expression RPAREN { 
        if ($3 < 0) {
            yyerror("Cannot take square root of negative number");
            $$ = 0;
        } else {
            $$ = sqrt($3); 
        }
    }
    | STRLEN LPAREN STRING RPAREN { $$ = strlen($3); }
    | SIN LPAREN expression RPAREN { $$ = sin($3 * M_PI / 180.0); } /* Input in degrees */
    | COS LPAREN expression RPAREN { $$ = cos($3 * M_PI / 180.0); } /* Input in degrees */
    | POW LPAREN expression COMMA expression RPAREN { $$ = pow($3, $5); }
    | LOG LPAREN expression RPAREN { 
        if ($3 <= 0) {
            yyerror("Cannot take logarithm of zero or negative number");
            $$ = 0;
        } else {
            $$ = log($3); 
        }
    }
    | expression PLUS expression { $$ = $1 + $3; }
    | expression MINUS expression { $$ = $1 - $3; }
    | expression TIMES expression { $$ = $1 * $3; }
    | expression DIVIDE expression { 
        if ($3 == 0) {
            yyerror("Division by zero");
            $$ = 0;
        } else {
            $$ = $1 / $3; 
        }
    }
    | expression POWER expression { $$ = pow($1, $3); }
    | MINUS expression %prec UMINUS { $$ = -$2; }
    | LPAREN expression RPAREN { $$ = $2; }
    ;
%%

void yyerror(char *s) {
    fprintf(stderr, "Error: %s\n", s);
}

int yywrap() {
    return 1;
}

int main() {
    printf("Function Evaluator with Arithmetic Operations\n");
    printf("Enter expressions, each ending with a newline.\n");
    printf("Press Ctrl+D (EOF) to exit.\n\n");
    
    yyparse();
    return 0;
}
/*----------------------------------------------*/

/* PROGRAM.L*/
%{
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "y.tab.h"

/* String buffer for storing function arguments */
char string_buffer[1024];
%}

%%
"sqrt"              { return SQRT; }
"strlen"            { return STRLEN; }
"sin"               { return SIN; }
"cos"               { return COS; }
"pow"               { return POW; }
"log"               { return LOG; }
[0-9]+(\.[0-9]+)?   { yylval.dval = atof(yytext); return NUMBER; }
\"[^\"]*\"          { 
                      /* Handle string literals for strlen */
                      strcpy(string_buffer, yytext+1); /* Skip the opening quote */
                      string_buffer[strlen(string_buffer)-1] = '\0'; /* Remove the closing quote */
                      yylval.sval = string_buffer;
                      return STRING; 
                    }
"+"                 { return PLUS; }
"-"                 { return MINUS; }
"*"                 { return TIMES; }
"/"                 { return DIVIDE; }
"^"                 { return POWER; }
"("                 { return LPAREN; }
")"                 { return RPAREN; }
","                 { return COMMA; }
[ \t]               ; /* Skip whitespace */
\n                  { return EOL; }
.                   { printf("Unknown character: %s\n", yytext); }
%%

/*
yacc -d program.y
lex program.l
cc y.tab.c lex.yy.c -lm
./a.out
*/